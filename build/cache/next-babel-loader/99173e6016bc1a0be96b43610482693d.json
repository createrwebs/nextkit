{"ast":null,"code":"/**\n * return indentation for a level\n * @param level\n */\nvar getIndent = function getIndent(level) {\n  var result = '',\n      i = level * 4;\n\n  if (level < 0) {\n    throw 'Level is below 0';\n  }\n\n  while (i--) {\n    result += ' ';\n  }\n\n  return result;\n};\n/**\n * Format and beautify html output\n * @param html the html to format\n */\n\n\nexport var formatHtml = function formatHtml(html) {\n  html = html.trim();\n  var tokens = html.split(/</);\n  var result = '',\n      indentLevel = 0;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var parts = tokens[i].split(/>/);\n\n    if (parts.length === 2) {\n      if (tokens[i][0] === '/') {\n        indentLevel--;\n      }\n\n      result += getIndent(indentLevel);\n\n      if (tokens[i][0] !== '/') {\n        indentLevel++;\n      }\n\n      if (i > 0) {\n        result += '<';\n      }\n\n      result += parts[0].trim() + '>\\n';\n\n      if (parts[1].trim() !== '') {\n        result += getIndent(indentLevel) + parts[1].trim().replace(/\\s+/g, ' ') + '\\n';\n      }\n\n      if (parts[0].match(/^(img|hr|br)/)) {\n        indentLevel--;\n      }\n    } else {\n      result += getIndent(indentLevel) + parts[0] + '\\n';\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/dohome/dohome/tail-kit/utils/Utils.ts"],"names":["getIndent","level","result","i","formatHtml","html","trim","tokens","split","indentLevel","l","length","parts","replace","match"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AACzB,MAAIC,MAAM,GAAG,EAAb;AAAA,MACIC,CAAC,GAAGF,KAAK,GAAG,CADhB;;AAEA,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACX,UAAM,kBAAN;AACH;;AACD,SAAOE,CAAC,EAAR,EAAY;AACRD,IAAAA,MAAM,IAAI,GAAV;AACH;;AACD,SAAOA,MAAP;AACH,CAVD;AAYA;AACA;AACA;AACA;;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAkB;AACxCA,EAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,EAAP;AACA,MAAMC,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAf;AACA,MAAIN,MAAM,GAAG,EAAb;AAAA,MACIO,WAAW,GAAG,CADlB;;AAGA,OAAK,IAAIN,CAAC,GAAG,CAAR,EAAWO,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCR,CAAC,GAAGO,CAAvC,EAA0CP,CAAC,EAA3C,EAA+C;AAC3C,QAAMS,KAAK,GAAGL,MAAM,CAACJ,CAAD,CAAN,CAAUK,KAAV,CAAgB,GAAhB,CAAd;;AACA,QAAII,KAAK,CAACD,MAAN,KAAiB,CAArB,EAAwB;AACpB,UAAIJ,MAAM,CAACJ,CAAD,CAAN,CAAU,CAAV,MAAiB,GAArB,EAA0B;AACtBM,QAAAA,WAAW;AACd;;AACDP,MAAAA,MAAM,IAAIF,SAAS,CAACS,WAAD,CAAnB;;AACA,UAAIF,MAAM,CAACJ,CAAD,CAAN,CAAU,CAAV,MAAiB,GAArB,EAA0B;AACtBM,QAAAA,WAAW;AACd;;AAED,UAAIN,CAAC,GAAG,CAAR,EAAW;AACPD,QAAAA,MAAM,IAAI,GAAV;AACH;;AAEDA,MAAAA,MAAM,IAAIU,KAAK,CAAC,CAAD,CAAL,CAASN,IAAT,KAAkB,KAA5B;;AACA,UAAIM,KAAK,CAAC,CAAD,CAAL,CAASN,IAAT,OAAoB,EAAxB,EAA4B;AACxBJ,QAAAA,MAAM,IAAIF,SAAS,CAACS,WAAD,CAAT,GAAyBG,KAAK,CAAC,CAAD,CAAL,CAASN,IAAT,GAAgBO,OAAhB,CAAwB,MAAxB,EAAgC,GAAhC,CAAzB,GAAgE,IAA1E;AACH;;AAED,UAAID,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,cAAf,CAAJ,EAAoC;AAChCL,QAAAA,WAAW;AACd;AACJ,KArBD,MAqBO;AACHP,MAAAA,MAAM,IAAIF,SAAS,CAACS,WAAD,CAAT,GAAyBG,KAAK,CAAC,CAAD,CAA9B,GAAoC,IAA9C;AACH;AACJ;;AACD,SAAOV,MAAP;AACH,CAlCM","sourcesContent":["/**\n * return indentation for a level\n * @param level\n */\nconst getIndent = (level) => {\n    let result = '',\n        i = level * 4;\n    if (level < 0) {\n        throw 'Level is below 0';\n    }\n    while (i--) {\n        result += ' ';\n    }\n    return result;\n};\n\n/**\n * Format and beautify html output\n * @param html the html to format\n */\nexport const formatHtml = (html: string) => {\n    html = html.trim();\n    const tokens = html.split(/</);\n    let result = '',\n        indentLevel = 0;\n\n    for (let i = 0, l = tokens.length; i < l; i++) {\n        const parts = tokens[i].split(/>/);\n        if (parts.length === 2) {\n            if (tokens[i][0] === '/') {\n                indentLevel--;\n            }\n            result += getIndent(indentLevel);\n            if (tokens[i][0] !== '/') {\n                indentLevel++;\n            }\n\n            if (i > 0) {\n                result += '<';\n            }\n\n            result += parts[0].trim() + '>\\n';\n            if (parts[1].trim() !== '') {\n                result += getIndent(indentLevel) + parts[1].trim().replace(/\\s+/g, ' ') + '\\n';\n            }\n\n            if (parts[0].match(/^(img|hr|br)/)) {\n                indentLevel--;\n            }\n        } else {\n            result += getIndent(indentLevel) + parts[0] + '\\n';\n        }\n    }\n    return result;\n};\n"]},"metadata":{},"sourceType":"module"}